//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17379
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HttpRestaurantOrderClient.RestaurantOrderService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RestaurantOrderService.RestaurantOrder")]
    public interface RestaurantOrder {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RestaurantOrder/MakeOrder", ReplyAction="http://tempuri.org/RestaurantOrder/MakeOrderResponse")]
        int MakeOrder(string[] items);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/RestaurantOrder/MakeOrder", ReplyAction="http://tempuri.org/RestaurantOrder/MakeOrderResponse")]
        System.IAsyncResult BeginMakeOrder(string[] items, System.AsyncCallback callback, object asyncState);
        
        int EndMakeOrder(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface RestaurantOrderChannel : HttpRestaurantOrderClient.RestaurantOrderService.RestaurantOrder, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MakeOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MakeOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RestaurantOrderClient : System.ServiceModel.ClientBase<HttpRestaurantOrderClient.RestaurantOrderService.RestaurantOrder>, HttpRestaurantOrderClient.RestaurantOrderService.RestaurantOrder {
        
        private BeginOperationDelegate onBeginMakeOrderDelegate;
        
        private EndOperationDelegate onEndMakeOrderDelegate;
        
        private System.Threading.SendOrPostCallback onMakeOrderCompletedDelegate;
        
        public RestaurantOrderClient() {
        }
        
        public RestaurantOrderClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RestaurantOrderClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RestaurantOrderClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RestaurantOrderClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<MakeOrderCompletedEventArgs> MakeOrderCompleted;
        
        public int MakeOrder(string[] items) {
            return base.Channel.MakeOrder(items);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginMakeOrder(string[] items, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMakeOrder(items, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndMakeOrder(System.IAsyncResult result) {
            return base.Channel.EndMakeOrder(result);
        }
        
        private System.IAsyncResult OnBeginMakeOrder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string[] items = ((string[])(inValues[0]));
            return this.BeginMakeOrder(items, callback, asyncState);
        }
        
        private object[] OnEndMakeOrder(System.IAsyncResult result) {
            int retVal = this.EndMakeOrder(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMakeOrderCompleted(object state) {
            if ((this.MakeOrderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MakeOrderCompleted(this, new MakeOrderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MakeOrderAsync(string[] items) {
            this.MakeOrderAsync(items, null);
        }
        
        public void MakeOrderAsync(string[] items, object userState) {
            if ((this.onBeginMakeOrderDelegate == null)) {
                this.onBeginMakeOrderDelegate = new BeginOperationDelegate(this.OnBeginMakeOrder);
            }
            if ((this.onEndMakeOrderDelegate == null)) {
                this.onEndMakeOrderDelegate = new EndOperationDelegate(this.OnEndMakeOrder);
            }
            if ((this.onMakeOrderCompletedDelegate == null)) {
                this.onMakeOrderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMakeOrderCompleted);
            }
            base.InvokeAsync(this.onBeginMakeOrderDelegate, new object[] {
                        items}, this.onEndMakeOrderDelegate, this.onMakeOrderCompletedDelegate, userState);
        }
    }
}
